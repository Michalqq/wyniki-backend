{"version":3,"file":"516.js","mappings":"o2DAQO,IAAMA,EAAY,SAACC,GACxB,SAAwBC,EAAAA,EAAAA,UAAS,CAAEC,SAAU,GAAIC,SAAU,KAAMC,MAAO,KAAxE,GAAOC,EAAP,KAAaC,EAAb,KACA,KAA4BL,EAAAA,EAAAA,UAASM,eAAeC,QAAQ,aAA5D,GAAOC,EAAP,KAAeC,EAAf,KACA,KAA0BT,EAAAA,EAAAA,YAA1B,GAAOU,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,MAAcC,OAsB9BC,EAAe,SAACC,GACpBb,EAAQ,EAAD,KAAMD,GAAN,QAAac,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAQvD,OACE,uBAAKC,UAAU,iBACb,uBAAKA,UAAU,gBACb,uBAAKA,UAAU,8BACb,uBAAKA,UAAU,8BACb,gBAAC,IAAD,CAAMA,UAAU,eACd,gBAAC,WAAD,CAAaA,UAAU,4BAAvB,aAGA,gBAAC,SAAD,KACE,wBAAMC,SAfC,SAACL,GACpBA,EAAMM,iBAxBNb,IACAc,IAAAA,KAAA,WACWC,EAAAA,EAAAA,MADX,gBACuCtB,GACpCuB,MAAK,SAACC,GACc,MAAfA,EAAIC,QACNpB,EAAUmB,EAAIE,KAAK7B,UACnBK,eAAeyB,QAAQ,WAAYH,EAAIE,KAAK7B,UAC5CK,eAAeyB,QAAQ,QAASH,EAAIE,KAAKE,OACzC1B,eAAeyB,QAAQ,QAASH,EAAIE,KAAKG,OACzCrB,EAAS,IAAME,GAAiB,IAEhCH,EAASiB,EAAIE,SAGhBI,OAAM,SAACC,GACNxB,EAASwB,EAAIC,SAASN,WAwBZ,gBAAC,IAAD,CACEO,MAAM,kBACNjB,KAAK,WACLH,aAAcA,EACdqB,KAAK,EACLjB,MAAOjB,EAAKH,SACZsC,UAAU,IAEZ,gBAAC,IAAD,CACEF,MAAM,QACNjB,KAAK,WACLH,aAAcA,EACdqB,KAAK,EACLjB,MAAOjB,EAAKF,SACZsC,KAAK,WACLD,UAAU,IAEX/B,GAAqB,OAAXA,GACT,0DAA8BA,IAE/BE,GAAS,mCAAOA,IACjB,gBAAC,IAAD,CACEY,UAAW,YACXmB,QAAQ,UACRD,KAAK,SACLE,SAAUlC,GAJZ,aAUJ,gBAAC,WAAD,CAAac,UAAU,cAAvB,oBAEE,qBACEqB,KAAK,SACLC,MAAM,IACNC,QAAS,kBAAMjC,EAAS,eAH1B,mBAOA,2BACA,qBACEkC,MAAO,CAAEC,SAAU,QACnBJ,KAAK,SACLC,MAAM,IACNC,QAAS,kBAAMjC,EAAS,eAJ1B,yBAiBhB","sources":["webpack://javascript/./src/components/page/auth/LoginPage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport axios from \"axios\";\r\nimport { InputLabeled } from \"../../common/InputLabeled\";\r\nimport { backendUrl } from \"../../utils/fetchUtils\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nexport const LoginPage = (props) => {\r\n  const [user, setUser] = useState({ username: \"\", password: null, email: \"\" });\r\n  const [logged, setLogged] = useState(sessionStorage.getItem(\"username\"));\r\n  const [error, setError] = useState();\r\n  const navigate = useNavigate();\r\n  const eventRedirect = useLocation().search;\r\n\r\n  const signIn = () => {\r\n    setError();\r\n    axios\r\n      .post(`${backendUrl()}/auth/signin`, user)\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setLogged(res.data.username);\r\n          sessionStorage.setItem(\"username\", res.data.username);\r\n          sessionStorage.setItem(\"token\", res.data.token);\r\n          sessionStorage.setItem(\"roles\", res.data.roles);\r\n          navigate(\"/\" + eventRedirect || \"\");\r\n        } else {\r\n          setError(res.data);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setError(err.response.data);\r\n      });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setUser({ ...user, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    signIn();\r\n  };\r\n\r\n  return (\r\n    <div className=\"u-text-center\">\r\n      <div className=\"u-box-shadow\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-lg-4 pb-3 u-box-shadow\">\r\n            <Card className=\"text-center\">\r\n              <Card.Header className=\"bg-dark-green text-white\">\r\n                Logowanie\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <form onSubmit={handleSubmit}>\r\n                  <InputLabeled\r\n                    label=\"Login lub email\"\r\n                    name=\"username\"\r\n                    handleChange={handleChange}\r\n                    big={true}\r\n                    value={user.username}\r\n                    required={true}\r\n                  />\r\n                  <InputLabeled\r\n                    label=\"Hasło\"\r\n                    name=\"password\"\r\n                    handleChange={handleChange}\r\n                    big={true}\r\n                    value={user.password}\r\n                    type=\"password\"\r\n                    required={true}\r\n                  />\r\n                  {logged && logged !== null && (\r\n                    <p>{`Zalogowany użytkownik: ${logged}`}</p>\r\n                  )}\r\n                  {error && <p>{`${error}`}</p>}\r\n                  <Button\r\n                    className={\"px-4 mt-2\"}\r\n                    variant=\"success\"\r\n                    type=\"submit\"\r\n                    disabled={logged}\r\n                  >\r\n                    Zaloguj\r\n                  </Button>\r\n                </form>\r\n              </Card.Body>\r\n              <Card.Footer className=\"text-muted\">\r\n                {`Nie masz konta - `}\r\n                <a\r\n                  role=\"button\"\r\n                  class=\"a\"\r\n                  onClick={() => navigate(`/register`)}\r\n                >\r\n                  zarejestruj się\r\n                </a>\r\n                <br></br>\r\n                <a\r\n                  style={{ fontSize: \"13px\" }}\r\n                  role=\"button\"\r\n                  class=\"a\"\r\n                  onClick={() => navigate(`/reminder`)}\r\n                >\r\n                  Odzyskaj hasło\r\n                </a>\r\n              </Card.Footer>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["LoginPage","props","useState","username","password","email","user","setUser","sessionStorage","getItem","logged","setLogged","error","setError","navigate","useNavigate","eventRedirect","useLocation","search","handleChange","event","target","name","value","className","onSubmit","preventDefault","axios","backendUrl","then","res","status","data","setItem","token","roles","catch","err","response","label","big","required","type","variant","disabled","role","class","onClick","style","fontSize"],"sourceRoot":""}